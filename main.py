"""
Life Gamification System - v3 Full Rewrite
–ó–∞–ø—É—Å–∫: streamlit run main.py
"""

import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime, timedelta
from pathlib import Path
import json
import plotly.express as px
import base64

# ============= CONFIG =============
DB_PATH = Path.home() / ".gamify" / "xp.db"
IMAGES_PATH = Path.home() / ".gamify" / "shop_images"
NIKOCOIN_PATH = Path.home() / ".gamify" / "nikocoin.png"
DB_PATH.parent.mkdir(exist_ok=True)
IMAGES_PATH.mkdir(exist_ok=True)

def get_nikocoin_icon():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –≤–∞–ª—é—Ç—ã - –ª–∏–±–æ –∫–∞—Å—Ç–æ–º–Ω—É—é, –ª–∏–±–æ —ç–º–æ–¥–∑–∏"""
    if NIKOCOIN_PATH.exists():
        return f'<img src="data:image/png;base64,{get_image_base64(NIKOCOIN_PATH)}" width="40" style="vertical-align: middle;">'
    return "ü™ô"

def get_image_base64(image_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ HTML"""
    import base64
    with open(image_path, "rb") as f:
        return base64.b64encode(f.read()).decode()

# ============= DATABASE =============
def get_connection():
    return sqlite3.connect(str(DB_PATH), check_same_thread=False)

def init_database():
    conn = get_connection()
    c = conn.cursor()

    c.execute('''CREATE TABLE IF NOT EXISTS fronts (
        id INTEGER PRIMARY KEY,
        code TEXT UNIQUE NOT NULL,
        name TEXT NOT NULL,
        coef REAL NOT NULL DEFAULT 1.0,
        weight REAL NOT NULL DEFAULT 1.0,
        tier_daily REAL DEFAULT 1.0,
        tier_weekly REAL DEFAULT 1.2,
        tier_sprint REAL DEFAULT 1.5,
        tier_campaign REAL DEFAULT 2.0,
        diff_1 REAL DEFAULT 0.5,
        diff_2 REAL DEFAULT 1.0,
        diff_3 REAL DEFAULT 1.5,
        diff_4 REAL DEFAULT 2.0,
        diff_5 REAL DEFAULT 3.0
    )''')

    # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    try:
        c.execute("SELECT tier_daily FROM fronts LIMIT 1")
    except sqlite3.OperationalError:
        for col in ['tier_daily', 'tier_weekly', 'tier_sprint', 'tier_campaign',
                    'diff_1', 'diff_2', 'diff_3', 'diff_4', 'diff_5']:
            try:
                default_val = {'tier_daily': 1.0, 'tier_weekly': 1.2, 'tier_sprint': 1.5,
                              'tier_campaign': 2.0, 'diff_1': 0.5, 'diff_2': 1.0,
                              'diff_3': 1.5, 'diff_4': 2.0, 'diff_5': 3.0}[col]
                c.execute(f"ALTER TABLE fronts ADD COLUMN {col} REAL DEFAULT {default_val}")
            except sqlite3.OperationalError:
                pass
        conn.commit()

    c.execute('''CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY,
        date TEXT NOT NULL,
        front_code TEXT NOT NULL,
        tier TEXT NOT NULL,
        piece_type TEXT NOT NULL,
        note TEXT,
        minutes INTEGER DEFAULT 0,
        difficulty INTEGER DEFAULT 2,
        status TEXT NOT NULL,
        total_xp REAL DEFAULT 0,
        coins_earned REAL DEFAULT 0
    )''')

    # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º coins_earned –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        c.execute("SELECT coins_earned FROM tasks LIMIT 1")
    except sqlite3.OperationalError:
        c.execute("ALTER TABLE tasks ADD COLUMN coins_earned REAL DEFAULT 0")
        conn.commit()

    c.execute('''CREATE TABLE IF NOT EXISTS level_thresholds (
        level INTEGER PRIMARY KEY,
        xp_threshold INTEGER NOT NULL
    )''')

    c.execute('''CREATE TABLE IF NOT EXISTS piece_types (
        id INTEGER PRIMARY KEY,
        front_code TEXT NOT NULL,
        code TEXT UNIQUE NOT NULL,
        name TEXT NOT NULL,
        tier TEXT NOT NULL,
        base_xp REAL NOT NULL
    )''')

    # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º tier –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        c.execute("SELECT tier FROM piece_types LIMIT 1")
    except sqlite3.OperationalError:
        c.execute("ALTER TABLE piece_types ADD COLUMN tier TEXT DEFAULT 'Daily'")
        conn.commit()

    c.execute('''CREATE TABLE IF NOT EXISTS rewards (
        id INTEGER PRIMARY KEY,
        name TEXT NOT NULL,
        cost_coins INTEGER NOT NULL,
        image_path TEXT
    )''')

    c.execute('''CREATE TABLE IF NOT EXISTS purchases (
        id INTEGER PRIMARY KEY,
        date TEXT NOT NULL,
        reward_id INTEGER NOT NULL,
        coins_spent INTEGER NOT NULL,
        FOREIGN KEY(reward_id) REFERENCES rewards(id)
    )''')

    c.execute('''CREATE TABLE IF NOT EXISTS user_prefs (
        key TEXT PRIMARY KEY,
        value TEXT NOT NULL
    )''')

    # –ù–∏–∫–æ–∏–Ω—ã (–æ—Ç–¥–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤)
    c.execute('''CREATE TABLE IF NOT EXISTS coins_log (
        id INTEGER PRIMARY KEY,
        date TEXT NOT NULL,
        source TEXT NOT NULL,
        amount REAL NOT NULL,
        description TEXT
    )''')

    conn.commit()
    return conn

def seed_data(conn):
    c = conn.cursor()
    c.execute("SELECT COUNT(*) FROM fronts")
    if c.fetchone()[0] > 0:
        return

    # Fronts —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏
    fronts = [
        ('guitar', '–ì–∏—Ç–∞—Ä–∞', 0.9, 0.9, 1.0, 1.2, 1.5, 2.0, 0.5, 1.0, 1.5, 2.0, 3.0),
        ('english', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π', 1.1, 1.1, 1.0, 1.2, 1.5, 2.0, 0.5, 1.0, 1.5, 2.0, 3.0),
        ('sport', '–°–ø–æ—Ä—Ç', 1.0, 1.0, 1.0, 1.2, 1.5, 2.0, 0.5, 1.0, 1.5, 2.0, 3.0),
        ('business', '–ù–æ–≤—ã–π –±–∏–∑–Ω–µ—Å', 1.4, 1.4, 1.0, 1.2, 1.5, 2.0, 0.5, 1.0, 1.5, 2.0, 3.0),
        ('books', '–ö–Ω–∏–≥–∏', 0.8, 0.8, 1.0, 1.2, 1.5, 2.0, 0.5, 1.0, 1.5, 2.0, 3.0),
        ('brain', '–ö–æ–≥–Ω–∏—Ç–∏–≤–∫–∞', 1.2, 1.2, 1.0, 1.2, 1.5, 2.0, 0.5, 1.0, 1.5, 2.0, 3.0),
    ]
    c.executemany("""INSERT INTO fronts (code, name, coef, weight, tier_daily, tier_weekly, tier_sprint, tier_campaign,
                     diff_1, diff_2, diff_3, diff_4, diff_5) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""", fronts)

    # –ü–æ–ª–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á –∏–∑ –¢–ó
    pieces = [
        # –ì–∏—Ç–∞—Ä–∞
        ('guitar', 'GuitarWarmup', '–†–∞–∑–º–∏–Ω–∫–∞ 10-15 –º–∏–Ω', 'Daily', 5),
        ('guitar', 'GuitarChunk', '–ö—É—Å–æ–∫ –ø–µ—Å–Ω–∏ (—Ä–∏—Ñ/–∫—É–ø–ª–µ—Ç)', 'Daily', 10),
        ('guitar', 'GuitarBlend', '–°–≤–µ–¥–µ–Ω–∏–µ –∫—É—Å–∫–æ–≤', 'Daily', 15),
        ('guitar', 'GuitarPart', '–¶–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å (–∫—É–ø–ª–µ—Ç/–ø—Ä–∏–ø–µ–≤)', 'Weekly', 50),
        ('guitar', 'GuitarRecording', '–ó–∞–ø–∏—Å—å 30-60 —Å–µ–∫', 'Weekly', 20),
        ('guitar', 'GuitarReviewPlan', '–†–∞–∑–±–æ—Ä –æ—à–∏–±–æ–∫ + –ø–ª–∞–Ω', 'Weekly', 10),
        ('guitar', 'GuitarFullSong', '–ü–µ—Å–Ω—è —Ü–µ–ª–∏–∫–æ–º –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', 'Sprint', 200),
        ('guitar', 'GuitarTempo10', '–¢–µ–º–ø +10 BPM', 'Sprint', 50),
        ('guitar', 'GuitarSet2', '–°–µ—Ç –∏–∑ 2 –ø–µ—Å–µ–Ω', 'Campaign', 400),
        ('guitar', 'GuitarSet3', '–°–µ—Ç –∏–∑ 3 –ø–µ—Å–µ–Ω', 'Campaign', 600),
        ('guitar', 'GuitarDemo', '–î–µ–º–∫–∞ 5-7 –º–∏–Ω', 'Campaign', 300),
        ('guitar', 'GuitarLive', '–í—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ/—Å—Ç—Ä–∏–º', 'Campaign', 500),

        # –ê–Ω–≥–ª–∏–π—Å–∫–∏–π
        ('english', 'EngVocab10', '10-15 –Ω–æ–≤—ã—Ö —Å–ª–æ–≤', 'Daily', 10),
        ('english', 'EngRead10', '10 –º–∏–Ω —á—Ç–µ–Ω–∏–µ', 'Daily', 8),
        ('english', 'EngListen10', '–°–µ—Ä–∏–∞–ª —Å —Å—É–±–∞–º–∏ 10 –º–∏–Ω', 'Daily', 6),
        ('english', 'EngSpeak5', '5-10 –º–∏–Ω —Ä–∞–∑–≥–æ–≤–æ—Ä', 'Daily', 12),
        ('english', 'EngReadOrig10', '10 —Å—Ç—Ä —Å–ª–æ–∂–Ω–æ–π –∫–Ω–∏–≥–∏', 'Daily', 15),
        ('english', 'EngReadOrig20', '20 —Å—Ç—Ä —Å–ª–æ–∂–Ω–æ–π –∫–Ω–∏–≥–∏', 'Daily', 30),
        ('english', 'EngWordPack50', '50 —Å–ª–æ–≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ (90%+)', 'Weekly', 50),
        ('english', 'EngListeningTest', '30 –º–∏–Ω –±–µ–∑ —Å—É–±–æ–≤', 'Weekly', 40),
        ('english', 'EngSpeakingDrill', '–ú–æ–Ω–æ–ª–æ–≥ 2-3 –º–∏–Ω', 'Weekly', 60),
        ('english', 'EngEssay200', '–≠—Å—Å–µ 150-200 —Å–ª–æ–≤', 'Weekly', 80),
        ('english', 'EngBookChapter', '–ì–ª–∞–≤–∞ + –ø–µ—Ä–µ—Å–∫–∞–∑', 'Sprint', 150),
        ('english', 'EngInterviewSim', '–ò–Ω—Ç–µ—Ä–≤—å—é 5-7 –º–∏–Ω', 'Sprint', 200),
        ('english', 'EngEssay3Pack', '3 —ç—Å—Å–µ –ø–æ 200-250 —Å–ª–æ–≤', 'Sprint', 250),
        ('english', 'EngTestSim', '–ü—Ä–æ–±–Ω—ã–π —Ç–µ—Å—Ç C1', 'Sprint', 300),
        ('english', 'EngBookOrigChapter', '–ì–ª–∞–≤–∞ —Å–ª–æ–∂–Ω–æ–π –∫–Ω–∏–≥–∏', 'Sprint', 200),
        ('english', 'EngBigRead', '–ö–Ω–∏–≥–∞ 200+ —Å—Ç—Ä', 'Campaign', 600),
        ('english', 'EngBigTalk', '–†–∞–∑–≥–æ–≤–æ—Ä 30-40 –º–∏–Ω —Å –Ω–æ—Å–∏—Ç–µ–ª–µ–º', 'Campaign', 800),
        ('english', 'EngBigWrite', '3-5 —ç—Å—Å–µ —Å —Ä–∞–∑–±–æ—Ä–æ–º', 'Campaign', 500),
        ('english', 'EngSeriesFull', '–°–µ–∑–æ–Ω 10+ —Å–µ—Ä–∏–π', 'Campaign', 700),
        ('english', 'EngBookOrigFull', '–ü–æ–ª–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ', 'Campaign', 800),

        # –°–ø–æ—Ä—Ç
        ('sport', 'SportWarmup', '–†–∞–∑–º–∏–Ω–∫–∞ 10-15 –º–∏–Ω', 'Daily', 5),
        ('sport', 'SportStrength', '–°–∏–ª–æ–≤–∞—è 40-60 –º–∏–Ω', 'Daily', 40),
        ('sport', 'SportConditioning', '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª 20-30 –º–∏–Ω', 'Daily', 50),
        ('sport', 'SportMobility', '–†–∞—Å—Ç—è–∂–∫–∞/–π–æ–≥–∞ 10 –º–∏–Ω', 'Daily', 8),
        ('sport', 'SportRecovery', '–ê–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ 20 –º–∏–Ω', 'Daily', 10),
        ('sport', 'SportWeek3', '2 —Å–∏–ª–æ–≤—ã–µ + 1 —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', 'Weekly', 50),
        ('sport', 'SportProgressTest', '–¢–µ—Å—Ç –≤–µ—Å–∞/–ø–æ–≤—Ç–æ—Ä–æ–≤', 'Weekly', 30),
        ('sport', 'SportCardioChallenge', '+10% –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏/–∏–Ω—Ç–µ—Ä–≤–∞–ª', 'Weekly', 40),
        ('sport', 'SportStrengthProgress', '+2.5-5 –∫–≥ –∏–ª–∏ +2-3 –ø–æ–≤—Ç–æ—Ä–∞', 'Sprint', 200),
        ('sport', 'SportConditioningNew', '–ù–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Å –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', 'Sprint', 150),
        ('sport', 'SportEndurance', '30-40 –º–∏–Ω –∫–∞—Ä–¥–∏–æ', 'Sprint', 180),
        ('sport', 'SportNoSkip', '–°–ø—Ä–∏–Ω—Ç –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤', 'Sprint', 100),
        ('sport', 'SportStrengthGoal', '–¶–µ–ª—å: –∂–∏–º 100/–ø—Ä–∏—Å–µ–¥ 120/–ø–æ–¥—Ç—è–≥ 15', 'Campaign', 600),
        ('sport', 'SportConditioningGoal', '5 –∫–º ‚â§25 –º–∏–Ω / 200 –±—ë—Ä–ø–∏', 'Campaign', 500),
        ('sport', 'SportBodyMeasures', '–§–æ—Ç–æ/–∑–∞–º–µ—Ä—ã vs —Å—Ç–∞—Ä—Ç', 'Campaign', 300),
        ('sport', 'SportTestDay', '–°–∏–ª–æ–≤–æ–π + —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª + –∫–∞—Ä–¥–∏–æ', 'Campaign', 800),

        # –ë–∏–∑–Ω–µ—Å
        ('business', 'BizLeadHandled', '–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–¥–∞', 'Daily', 15),
        ('business', 'BizCRMUpdate', '–§–∏–∫—Å–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤', 'Daily', 5),
        ('business', 'BizTeamCheckin', '–ß–µ–∫–∏–Ω —Å –∫–æ–º–∞–Ω–¥–æ–π', 'Daily', 10),
        ('business', 'BizOutput1', 'Output: –±–æ—Ç/—Ñ–∏—á–∞/–Ω–∞—Å—Ç—Ä–æ–π–∫–∞', 'Daily', 20),
        ('business', 'BizDeal1-2', '1-2 —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –¥–µ–º–æ', 'Weekly', 100),
        ('business', 'BizCoderDelivery', '–ü—Ä–æ–≥–≥–µ—Ä —Å–¥–∞–ª –º–æ–¥—É–ª—å', 'Weekly', 80),
        ('business', 'BizPromptBot', '–ü—Ä–æ–º–ø—Ç–µ—Ä —Å–¥–∞–ª –±–æ—Ç–∞', 'Weekly', 150),
        ('business', 'BizSales20', '20+ –∫–∞—Å–∞–Ω–∏–π', 'Weekly', 60),
        ('business', 'BizMarketingReport', '–û—Ç—á—ë—Ç –ø–æ –ª–∏–¥–∞–º', 'Weekly', 40),
        ('business', 'BizFinanceWeekly', '–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞', 'Weekly', 30),
        ('business', 'BizClients5-7', '+5-7 –ø–ª–∞—Ç–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤', 'Sprint', 400),
        ('business', 'BizROIBreakeven', '–†–µ–∫–ª–∞–º–∞ –≤ 0', 'Sprint', 300),
        ('business', 'BizTechPipeline', '–°—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å 1-2 –±–æ—Ç–∞/–Ω–µ–¥', 'Sprint', 250),
        ('business', 'BizTeamAutonomy', '–ö–æ–º–∞–Ω–¥–∞ –±–µ–∑ –º–∏–∫—Ä–æ–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞', 'Sprint', 200),
        ('business', 'BizRevenue15k', '$15k+ –∑–∞ 3 –º–µ—Å', 'Campaign', 1000),
        ('business', 'BizOfficeOpen', '–û—Ñ–∏—Å –∑–∞–ø—É—â–µ–Ω', 'Campaign', 600),
        ('business', 'BizClients15-20', '15-20 –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤', 'Campaign', 800),
        ('business', 'BizProcessStable', '–ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ—Ç–∞ –≤ —Å—Ä–æ–∫', 'Campaign', 500),
        ('business', 'BizLeadFlow5+', '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ 5+ –ª–∏–¥–æ–≤/–¥–µ–Ω—å', 'Campaign', 400),

        # –ö–Ω–∏–≥–∏
        ('books', 'BooksRead10-20', '10-20 —Å—Ç—Ä', 'Daily', 8),
        ('books', 'BooksNote1-2', '1-2 –∑–∞–º–µ—Ç–∫–∏ –∏–¥–µ–π', 'Daily', 5),
        ('books', 'BooksChapter', '–ì–ª–∞–≤–∞ + –∫–æ–Ω—Å–ø–µ–∫—Ç', 'Weekly', 50),
        ('books', 'BooksApplyIdea', '–í–Ω–µ–¥—Ä–∏–ª –∏–¥–µ—é', 'Weekly', 30),
        ('books', 'BooksFullBook', '–ö–Ω–∏–≥–∞ 200-300 —Å—Ç—Ä', 'Sprint', 200),
        ('books', 'BooksMindmap', 'Mind map', 'Sprint', 80),
        ('books', 'BooksActions3', '3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏—è', 'Sprint', 60),
        ('books', 'Books3-4', '3-4 –∫–Ω–∏–≥–∏', 'Campaign', 600),
        ('books', 'BooksReviewEach', '–û–±–∑–æ—Ä/—ç—Å—Å–µ –Ω–∞ –∫–∞–∂–¥—É—é', 'Campaign', 300),
        ('books', 'BooksIntegrationProof', '–ò–¥–µ—è –∏–∑ –∫–∞–∂–¥–æ–π –≤–Ω–µ–¥—Ä–µ–Ω–∞', 'Campaign', 400),
        ('books', 'BooksPresentation', '–ú–∏–Ω–∏-–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', 'Campaign', 500),

        # –ö–æ–≥–Ω–∏—Ç–∏–≤–∫–∞
        ('brain', 'BrainMathDrill', '3 –∑–∞–¥–∞—á–∏ –ª–æ–≥–∏–∫–∞/–∞–ª–≥–µ–±—Ä–∞', 'Daily', 12),
        ('brain', 'BrainMemoryTrain', '10-15 —Å–ª–æ–≤/—á–∏—Å–µ–ª', 'Daily', 10),
        ('brain', 'BrainSpeedRead', '–°—Ç–∞—Ç—å—è ‚Üí –ø–µ—Ä–µ—Å–∫–∞–∑', 'Daily', 8),
        ('brain', 'BrainWrite20', '20 –∏–¥–µ–π –∑–∞ 10 –º–∏–Ω', 'Daily', 15),
        ('brain', 'BrainPuzzlePack', '1-2 –≥–æ–ª–æ–≤–æ–ª–æ–º–∫–∏', 'Weekly', 40),
        ('brain', 'BrainStrategyGame', '–®–∞—Ö–º–∞—Ç—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º', 'Weekly', 50),
        ('brain', 'BrainCognitiveEssay', '300 —Å–ª–æ–≤: —á—Ç–æ –ø–æ–Ω—è–ª', 'Weekly', 60),
        ('brain', 'BrainCodingMini', '–°–∫—Ä–∏–ø—Ç/–∞–ª–≥–æ—Ä–∏—Ç–º', 'Weekly', 70),
        ('brain', 'BrainCourseChunk', '–ú–æ–¥—É–ª—å –∫—É—Ä—Å–∞', 'Sprint', 200),
        ('brain', 'BrainMemoryProject', '50 —Ñ–∞–∫—Ç–æ–≤/100 —Å–ª–æ–≤', 'Sprint', 150),
        ('brain', 'BrainCreativeOutput', '–†–∞—Å—Å–∫–∞–∑/—ç—Å—Å–µ/–ø—Ä–æ–µ–∫—Ç', 'Sprint', 180),
        ('brain', 'BrainCompetitive', '–¢—É—Ä–Ω–∏—Ä/–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞', 'Sprint', 220),
        ('brain', 'BrainHardSkill', '–ù–æ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', 'Campaign', 800),
        ('brain', 'BrainPublicResult', '–°—Ç–∞—Ç—å—è 2000+ —Å–ª–æ–≤', 'Campaign', 600),
        ('brain', 'BrainBenchmark', '–¢–µ—Å—Ç IQ/–∫–æ–≥–Ω–∏—Ç–∏–≤–∫–∏', 'Campaign', 400),
        ('brain', 'BrainPresentation', '–î–æ–∫–ª–∞–¥ 15-20 –º–∏–Ω', 'Campaign', 700),
    ]
    c.executemany("INSERT INTO piece_types (front_code, code, name, tier, base_xp) VALUES (?, ?, ?, ?, ?)", pieces)

    # Thresholds
    thresholds = [(1, 100)]
    for i in range(2, 51):
        thresholds.append((i, round(thresholds[-1][1] * 1.5)))
    c.executemany("INSERT INTO level_thresholds (level, xp_threshold) VALUES (?, ?)", thresholds)

    # Rewards
    rewards = [
        ('–ù–æ—á–Ω–æ–π —Å–µ—Ä–∏–∞–ª', 200, None),
        ('–°–≤–æ–±–æ–¥–Ω—ã–π –¥–µ–Ω—å', 2500, None),
        ('–ú–µ–ª–∫–∞—è –ø–æ–∫—É–ø–∫–∞', 4000, None),
        ('–¢–∏–Ω–¥–µ—Ä-—Å–µ—Å—Å–∏—è', 300, None),
    ]
    c.executemany("INSERT INTO rewards (name, cost_coins, image_path) VALUES (?, ?, ?)", rewards)

    conn.commit()

# ============= XP & COINS ENGINE =============
def get_tier_mult(conn, front_code, tier):
    c = conn.cursor()
    col = f"tier_{tier.lower()}"
    c.execute(f"SELECT {col} FROM fronts WHERE code=?", (front_code,))
    row = c.fetchone()
    return row[0] if row else 1.0

def get_diff_mult(conn, front_code, difficulty):
    c = conn.cursor()
    col = f"diff_{difficulty}"
    c.execute(f"SELECT {col} FROM fronts WHERE code=?", (front_code,))
    row = c.fetchone()
    return row[0] if row else 1.0

def calc_task_xp(task, conn):
    if task['status'] not in ['Done', 'Failed', 'Skipped']:
        return 0.0

    c = conn.cursor()
    c.execute("SELECT base_xp FROM piece_types WHERE code=?", (task['piece_type'],))
    row = c.fetchone()
    base_xp = row[0] if row else (task['minutes'] // 10) * 10

    tier_mult = get_tier_mult(conn, task['front_code'], task['tier'])
    diff_mult = get_diff_mult(conn, task['front_code'], task['difficulty'])

    total_xp = base_xp * tier_mult * diff_mult

    if task['status'] in ['Failed', 'Skipped']:
        total_xp = -total_xp * 0.5

    return round(total_xp, 1)

def get_level(xp, conn):
    c = conn.cursor()
    c.execute("SELECT level FROM level_thresholds WHERE xp_threshold <= ? ORDER BY level DESC LIMIT 1", (xp,))
    row = c.fetchone()
    return row[0] if row else 1

def get_next_threshold(level, conn):
    c = conn.cursor()
    c.execute("SELECT xp_threshold FROM level_thresholds WHERE level=?", (level + 1,))
    row = c.fetchone()
    return row[0] if row else 999999

def get_total_coins(conn):
    c = conn.cursor()
    c.execute("SELECT SUM(coins_earned) FROM tasks")
    earned = c.fetchone()[0] or 0
    c.execute("SELECT SUM(amount) FROM coins_log")
    bonuses = c.fetchone()[0] or 0
    c.execute("SELECT SUM(coins_spent) FROM purchases")
    spent = c.fetchone()[0] or 0
    return earned + bonuses - spent

def check_levelup_bonus(conn, old_level, new_level):
    """–ù–∞—á–∏—Å–ª—è–µ—Ç –±–æ–Ω—É—Å 100% –∑–∞ levelup"""
    if new_level > old_level:
        c = conn.cursor()
        c.execute("SELECT xp_threshold FROM level_thresholds WHERE level=?", (old_level,))
        row = c.fetchone()
        if row:
            bonus = row[0]
            c.execute("INSERT INTO coins_log (date, source, amount, description) VALUES (?, ?, ?, ?)",
                     (datetime.now().strftime('%Y-%m-%d'), 'levelup', bonus,
                      f'–ë–æ–Ω—É—Å –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è {new_level}'))
            conn.commit()
            return bonus
    return 0

def get_user_pref(conn, key, default=''):
    c = conn.cursor()
    c.execute("SELECT value FROM user_prefs WHERE key=?", (key,))
    row = c.fetchone()
    return row[0] if row else default

def set_user_pref(conn, key, value):
    c = conn.cursor()
    c.execute("INSERT OR REPLACE INTO user_prefs (key, value) VALUES (?, ?)", (key, value))
    conn.commit()

# ============= PAGES =============
def dashboard_page(conn):
    st.title("–î–∞—à–±–æ—Ä–¥")

    c = conn.cursor()

    # –û–±—â–∞—è XP (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è)
    c.execute("SELECT SUM(t.total_xp * f.weight) FROM tasks t JOIN fronts f ON t.front_code = f.code")
    overall_xp = c.fetchone()[0] or 0
    overall_level = get_level(overall_xp, conn)
    next_threshold = get_next_threshold(overall_level, conn)

    # –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥
    if overall_level == 1:
        current_threshold = 0
    else:
        c.execute("SELECT xp_threshold FROM level_thresholds WHERE level=?", (overall_level,))
        row = c.fetchone()
        current_threshold = row[0] if row else 0

    if next_threshold > current_threshold:
        progress = max(0, min(100, (overall_xp - current_threshold) / (next_threshold - current_threshold) * 100))
    else:
        progress = 0

    # –ù–∏–∫–æ–∏–Ω—ã
    total_coins = get_total_coins(conn)
    nikocoin_icon = get_nikocoin_icon()

    # –°–µ–≥–æ–¥–Ω—è (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è XP)
    today = datetime.now().strftime('%Y-%m-%d')
    c.execute("SELECT SUM(t.total_xp * f.weight) FROM tasks t JOIN fronts f ON t.front_code = f.code WHERE t.date=?", (today,))
    today_xp = c.fetchone()[0] or 0

    # –°—Ä–µ–¥–Ω—è—è –∑–∞ –Ω–µ–¥–µ–ª—é (–≤–∑–≤–µ—à–µ–Ω–Ω–∞—è XP)
    week_ago = (datetime.now() - timedelta(days=7)).strftime('%Y-%m-%d')
    c.execute("""
        SELECT AVG(daily_xp) FROM (
            SELECT SUM(t.total_xp * f.weight) as daily_xp 
            FROM tasks t
            JOIN fronts f ON t.front_code = f.code
            WHERE t.date >= ? 
            GROUP BY t.date
        )
    """, (week_ago,))
    week_avg = c.fetchone()[0] or 0

    col1, col2, col3, col4 = st.columns(4)
    col1.metric("–°–µ–≥–æ–¥–Ω—è XP", f"{today_xp:.0f}")
    col2.metric("–°—Ä–µ–¥–Ω—è—è/–Ω–µ–¥–µ–ª—è", f"{week_avg:.0f}")
    col3.metric("–£—Ä–æ–≤–µ–Ω—å", overall_level)
    col4.markdown(f"**–ù–∏–∫–æ–∏–Ω–æ–≤:** {nikocoin_icon} {total_coins:.0f}", unsafe_allow_html=True)

    st.write(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —É—Ä–æ–≤–Ω—è {overall_level + 1}:** {overall_xp:.0f} / {next_threshold}")
    st.progress(progress / 100.0)

    st.divider()

    st.subheader("–§—Ä–æ–Ω—Ç—ã")
    c.execute("""
        SELECT f.name, f.code, COALESCE(SUM(t.total_xp), 0) as total
        FROM fronts f
        LEFT JOIN tasks t ON f.code = t.front_code
        GROUP BY f.code
        ORDER BY total DESC
    """)

    for fname, fcode, fxp in c.fetchall():
        flvl = get_level(fxp, conn)
        st.metric(fname, f"Level {flvl}", f"{fxp:.0f} XP")

def front_detail_page(conn, front_code):
    c = conn.cursor()
    c.execute("SELECT name FROM fronts WHERE code=?", (front_code,))
    row = c.fetchone()
    if not row:
        st.error("–§—Ä–æ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    front_name = row[0]
    st.title(front_name)

    # XP —Ñ—Ä–æ–Ω—Ç–∞
    c.execute("SELECT COALESCE(SUM(total_xp), 0) FROM tasks WHERE front_code=?", (front_code,))
    front_xp = c.fetchone()[0]
    front_level = get_level(front_xp, conn)
    next_threshold = get_next_threshold(front_level, conn)

    # –¢–µ–∫—É—â–∏–π –ø–æ—Ä–æ–≥ = –ø–æ—Ä–æ–≥ –î–õ–Ø —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–µ –û–¢)
    if front_level == 1:
        current_threshold = 0
    else:
        c.execute("SELECT xp_threshold FROM level_thresholds WHERE level=?", (front_level,))
        row = c.fetchone()
        current_threshold = row[0] if row else 0

    # –†–∞—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    if next_threshold > current_threshold:
        progress = (front_xp - current_threshold) / (next_threshold - current_threshold) * 100
        progress = max(0, min(100, progress))
    else:
        progress = 0

    # DEBUG
    st.caption(f"DEBUG: front_xp={front_xp:.1f}, current={current_threshold}, next={next_threshold}, progress={progress:.1f}%")

    col1, col2 = st.columns(2)
    col1.metric("–£—Ä–æ–≤–µ–Ω—å", front_level)
    col2.metric("XP", f"{front_xp:.0f}")

    # –ë–æ–Ω—É—Å –∑–∞ —Å–ª–µ–¥—É—é—â–∏–π levelup (100% –æ—Ç –ø–æ—Ä–æ–≥–∞ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è)
    c.execute("SELECT xp_threshold FROM level_thresholds WHERE level=?", (front_level,))
    levelup_bonus_row = c.fetchone()
    levelup_bonus = levelup_bonus_row[0] if levelup_bonus_row else 100
    nikocoin_icon = get_nikocoin_icon()

    col_left, col_right = st.columns([4, 1])
    with col_left:
        st.write(f"**–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —É—Ä–æ–≤–Ω—è {front_level + 1}:** {front_xp:.0f} / {next_threshold}")
        # –ü—Ä–æ—Å—Ç–æ–π HTML-–±–∞—Ä
        bar_width = max(2, progress)  # –ú–∏–Ω–∏–º—É–º 2% –¥–ª—è –≤–∏–¥–∏–º–æ—Å—Ç–∏
        st.markdown(f"""
        <div style="background-color: #ddd; border-radius: 5px; height: 25px; width: 100%; position: relative;">
            <div style="background-color: #4CAF50; width: {bar_width}%; height: 100%; border-radius: 5px; 
                        display: flex; align-items: center; justify-content: center; color: white; font-weight: bold;">
                {progress:.1f}%
            </div>
        </div>
        """, unsafe_allow_html=True)
    with col_right:
        st.write(f"**‚Üí Lvl {front_level + 1}**")
        st.markdown(f"*+{levelup_bonus:.0f} {nikocoin_icon}*", unsafe_allow_html=True)

    st.divider()

    # –ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ç–∏—Ä–∞–º
    st.subheader("–ë—ã—Å—Ç—Ä–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ")

    # –¢–∞–±—ã –ø–æ —Ç–∏—Ä–∞–º
    tab1, tab2, tab3, tab4 = st.tabs(["Daily", "Weekly", "Sprint", "Campaign"])

    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    last_diff = int(get_user_pref(conn, f"{front_code}_diff", "2"))

    difficulty = st.slider("–°–ª–æ–∂–Ω–æ—Å—Ç—å (–≤–ª–∏—è–µ—Ç –Ω–∞ XP: x0.5 –¥–æ x3)", 1, 5, last_diff)
    set_user_pref(conn, f"{front_code}_diff", str(difficulty))

    for tier, tab in [("Daily", tab1), ("Weekly", tab2), ("Sprint", tab3), ("Campaign", tab4)]:
        with tab:
            c.execute("SELECT code, name, base_xp FROM piece_types WHERE front_code=? AND tier=? ORDER BY base_xp",
                     (front_code, tier))
            tasks = c.fetchall()

            if not tasks:
                st.info(f"–ù–µ—Ç –∑–∞–¥–∞—á —Ç–∏–ø–∞ {tier}")
                continue

            for task_code, task_name, base_xp in tasks:
                col1, col2, col3 = st.columns([3, 1, 1])
                col1.write(f"**{task_name}** ({base_xp} XP)")
                minutes = col2.number_input("–ú–∏–Ω—É—Ç—ã", 0, 300, 0, 10, key=f"min_{task_code}", label_visibility="collapsed")

                if col3.button("‚úì", key=f"do_{task_code}"):
                    task = {
                        'date': datetime.now().strftime('%Y-%m-%d'),
                        'front_code': front_code,
                        'tier': tier,
                        'piece_type': task_code,
                        'note': '',
                        'minutes': minutes,
                        'difficulty': difficulty,
                        'status': 'Done'
                    }

                    # –°—Ç–∞—Ä—ã–π —É—Ä–æ–≤–µ–Ω—å
                    old_overall_xp = c.execute("SELECT SUM(t.total_xp * f.weight) FROM tasks t JOIN fronts f ON t.front_code = f.code").fetchone()[0] or 0
                    old_level = get_level(old_overall_xp, conn)

                    total_xp = calc_task_xp(task, conn)
                    coins = total_xp  # 1:1

                    c.execute("""
                        INSERT INTO tasks (date, front_code, tier, piece_type, note, minutes, difficulty, status, total_xp, coins_earned)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
                    """, (task['date'], task['front_code'], task['tier'], task['piece_type'],
                          task['note'], task['minutes'], task['difficulty'], task['status'], total_xp, coins))

                    conn.commit()

                    # –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
                    new_overall_xp = c.execute("SELECT SUM(t.total_xp * f.weight) FROM tasks t JOIN fronts f ON t.front_code = f.code").fetchone()[0] or 0
                    new_level = get_level(new_overall_xp, conn)

                    # –ë–æ–Ω—É—Å –∑–∞ levelup
                    bonus = check_levelup_bonus(conn, old_level, new_level)

                    if bonus > 0:
                        st.success(f"+{total_xp:.0f} XP | +{coins:.0f} Ni-Coins | LEVEL UP! –ë–æ–Ω—É—Å: +{bonus:.0f} Ni-Coins!")
                        st.balloons()
                    else:
                        st.success(f"+{total_xp:.0f} XP | +{coins:.0f} Ni-Coins")

                    st.rerun()

    st.divider()

    # –î–∏–∞–≥—Ä–∞–º–º–∞
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ XP –ø–æ –∑–∞–¥–∞—á–∞–º")
    c.execute("""
        SELECT pt.name, SUM(t.total_xp) as total
        FROM tasks t
        JOIN piece_types pt ON t.piece_type = pt.code
        WHERE t.front_code = ?
        GROUP BY pt.code
        HAVING total > 0
        ORDER BY total DESC
    """, (front_code,))

    chart_data = c.fetchall()

    if chart_data:
        df = pd.DataFrame(chart_data, columns=['–ó–∞–¥–∞—á–∞', 'XP'])
        fig = px.pie(df, values='XP', names='–ó–∞–¥–∞—á–∞', hole=0.3)
        st.plotly_chart(fig, use_container_width=True)

    st.divider()

    # –ò—Å—Ç–æ—Ä–∏—è —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    st.subheader("–ò—Å—Ç–æ—Ä–∏—è")
    c.execute("""
        SELECT t.id, t.date, pt.name, t.status, t.total_xp
        FROM tasks t
        LEFT JOIN piece_types pt ON t.piece_type = pt.code
        WHERE t.front_code = ?
        ORDER BY t.date DESC, t.id DESC
        LIMIT 20
    """, (front_code,))

    history = c.fetchall()
    if history:
        for tid, tdate, tname, tstatus, txp in history:
            col1, col2, col3, col4, col5 = st.columns([2, 2, 1, 1, 1])
            col1.write(tdate)
            col2.write(tname)
            col3.write(tstatus)
            col4.write(f"{txp:.0f} XP")
            if col5.button("üóëÔ∏è", key=f"del_{tid}"):
                c.execute("DELETE FROM tasks WHERE id=?", (tid,))
                conn.commit()
                st.rerun()

def shop_page(conn):
    st.title("üõí –ú–∞–≥–∞–∑–∏–Ω")

    c = conn.cursor()
    total_coins = get_total_coins(conn)
    nikocoin_icon = get_nikocoin_icon()

    st.markdown(f"**–î–æ—Å—Ç—É–ø–Ω–æ:** {nikocoin_icon} {total_coins:.0f}", unsafe_allow_html=True)

    st.divider()

    tab1, tab2, tab3 = st.tabs(["–¢–æ–≤–∞—Ä—ã", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–ò—Å—Ç–æ—Ä–∏—è"])

    with tab1:
        st.subheader("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã")
        c.execute("SELECT id, name, cost_coins, image_path FROM rewards ORDER BY cost_coins")
        rewards = c.fetchall()

        if not rewards:
            st.info("–ú–∞–≥–∞–∑–∏–Ω –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤–æ –≤–∫–ª–∞–¥–∫–µ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'")

        for rid, rname, rcost, rimg in rewards:
            col1, col2, col3 = st.columns([2, 1, 1])

            if rimg and Path(rimg).exists():
                col1.image(str(rimg), width=100)

            col1.write(f"**{rname}**")
            col2.markdown(f"{nikocoin_icon} {rcost}", unsafe_allow_html=True)

            if col3.button("–ö—É–ø–∏—Ç—å", key=f"buy_{rid}", disabled=(total_coins < rcost)):
                c.execute("INSERT INTO purchases (date, reward_id, coins_spent) VALUES (?, ?, ?)",
                         (datetime.now().strftime('%Y-%m-%d'), rid, rcost))
                conn.commit()
                st.success(f"–ö—É–ø–ª–µ–Ω–æ: {rname}")
                st.balloons()
                st.rerun()

    with tab2:
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏")

        c.execute("SELECT id, name, cost_coins, image_path FROM rewards ORDER BY name")
        rewards = c.fetchall()

        for rid, rname, rcost, rimg in rewards:
            with st.expander(f"{rname} ({nikocoin_icon} {rcost})", expanded=False):
                new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", rname, key=f"rname_{rid}")
                new_cost = st.number_input(f"–¶–µ–Ω–∞ ({nikocoin_icon})", 0, 100000, rcost, 50, key=f"rcost_{rid}")

                # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏
                uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", type=['png', 'jpg', 'jpeg'], key=f"rimg_{rid}")
                if uploaded_file:
                    img_path = IMAGES_PATH / f"reward_{rid}_{uploaded_file.name}"
                    with open(img_path, "wb") as f:
                        f.write(uploaded_file.getbuffer())
                    new_img = str(img_path)
                    st.success(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {img_path.name}")
                else:
                    new_img = rimg

                if rimg and Path(rimg).exists():
                    st.image(str(rimg), width=150, caption="–¢–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞")

                col1, col2 = st.columns(2)
                if col1.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", key=f"rsave_{rid}"):
                    c.execute("UPDATE rewards SET name=?, cost_coins=?, image_path=? WHERE id=?",
                             (new_name, new_cost, new_img, rid))
                    conn.commit()
                    st.success("–û–±–Ω–æ–≤–ª–µ–Ω–æ")
                    st.rerun()

                if col2.button("–£–¥–∞–ª–∏—Ç—å", key=f"rdel_{rid}", type="secondary"):
                    c.execute("DELETE FROM rewards WHERE id=?", (rid,))
                    if rimg and Path(rimg).exists():
                        Path(rimg).unlink()
                    conn.commit()
                    st.success("–£–¥–∞–ª–µ–Ω–æ")
                    st.rerun()

        st.divider()
        st.subheader("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")

        new_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
        new_cost = st.number_input(f"–¶–µ–Ω–∞ ({nikocoin_icon})", 0, 100000, 100, 50)
        new_img_file = st.file_uploader("–ö–∞—Ä—Ç–∏–Ω–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", type=['png', 'jpg', 'jpeg'])

        if st.button("–°–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä"):
            if new_name:
                c.execute("INSERT INTO rewards (name, cost_coins, image_path) VALUES (?, ?, ?)",
                         (new_name, new_cost, None))
                conn.commit()

                new_rid = c.lastrowid

                if new_img_file:
                    img_path = IMAGES_PATH / f"reward_{new_rid}_{new_img_file.name}"
                    with open(img_path, "wb") as f:
                        f.write(new_img_file.getbuffer())
                    c.execute("UPDATE rewards SET image_path=? WHERE id=?", (str(img_path), new_rid))
                    conn.commit()

                st.success("–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω")
                st.rerun()

    with tab3:
        st.subheader("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫")
        c.execute("""
            SELECT p.date, r.name, p.coins_spent
            FROM purchases p
            JOIN rewards r ON p.reward_id = r.id
            ORDER BY p.id DESC
            LIMIT 50
        """)
        purchases = c.fetchall()

        if purchases:
            df = pd.DataFrame(purchases, columns=['–î–∞—Ç–∞', '–¢–æ–≤–∞—Ä', '–ü–æ—Ç—Ä–∞—á–µ–Ω–æ'])
            st.dataframe(df, use_container_width=True, hide_index=True)
        else:
            st.info("–ü–æ–∫—É–ø–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç")

def settings_page(conn):
    st.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    tab1, tab2 = st.tabs(["–§—Ä–æ–Ω—Ç—ã", "Ni-Coin –∏–∫–æ–Ω–∫–∞"])

    with tab2:
        st.subheader("–ò–∫–æ–Ω–∫–∞ Ni-Coin")

        if NIKOCOIN_PATH.exists():
            st.image(str(NIKOCOIN_PATH), width=100, caption="–¢–µ–∫—É—â–∞—è –∏–∫–æ–Ω–∫–∞")
            if st.button("–£–¥–∞–ª–∏—Ç—å –∏–∫–æ–Ω–∫—É"):
                NIKOCOIN_PATH.unlink()
                st.success("–ò–∫–æ–Ω–∫–∞ —É–¥–∞–ª–µ–Ω–∞, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç–º–æ–¥–∑–∏")
                st.rerun()
        else:
            st.info("–ò–∫–æ–Ω–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç–º–æ–¥–∑–∏ ü™ô")

        uploaded_icon = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É Ni-Coin (PNG, –∫—Ä—É–≥–ª–æ–µ —Ñ–æ—Ç–æ)", type=['png', 'jpg', 'jpeg'])

        if uploaded_icon and st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∫–æ–Ω–∫—É"):
            with open(NIKOCOIN_PATH, "wb") as f:
                f.write(uploaded_icon.getbuffer())
            st.success("–ò–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
            st.rerun()

    with tab1:
        c = conn.cursor()
        c.execute("SELECT code, name FROM fronts ORDER BY name")
        fronts = {row[1]: row[0] for row in c.fetchall()}

        selected_front_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç", list(fronts.keys()))
        front_code = fronts[selected_front_name]

    st.divider()

    # –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ—Ä–æ–Ω—Ç–∞
    c.execute("SELECT name, coef, weight FROM fronts WHERE code=?", (front_code,))
    fname, fcoef, fweight = c.fetchone()

    st.subheader("–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    new_fname = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", fname)
    col1, col2 = st.columns(2)
    new_fcoef = col1.number_input("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", 0.1, 5.0, fcoef, 0.1)
    new_fweight = col2.number_input("–í–µ—Å", 0.1, 5.0, fweight, 0.1)

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        c.execute("UPDATE fronts SET name=?, coef=?, weight=? WHERE code=?",
                 (new_fname, new_fcoef, new_fweight, front_code))
        conn.commit()
        st.success("–û–±–Ω–æ–≤–ª–µ–Ω–æ")

    if st.button("–£–¥–∞–ª–∏—Ç—å —Ñ—Ä–æ–Ω—Ç", type="secondary"):
        c.execute("DELETE FROM fronts WHERE code=?", (front_code,))
        c.execute("DELETE FROM piece_types WHERE front_code=?", (front_code,))
        c.execute("DELETE FROM tasks WHERE front_code=?", (front_code,))
        conn.commit()
        st.success("–§—Ä–æ–Ω—Ç —É–¥–∞–ª—ë–Ω")
        st.rerun()

    st.divider()

    # –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
    st.subheader("–ú–Ω–æ–∂–∏—Ç–µ–ª–∏")
    c.execute("""SELECT tier_daily, tier_weekly, tier_sprint, tier_campaign, 
                 diff_1, diff_2, diff_3, diff_4, diff_5 FROM fronts WHERE code=?""", (front_code,))
    row = c.fetchone()

    st.write("**–¢–∏—Ä—ã:**")
    col1, col2, col3, col4 = st.columns(4)
    t_daily = col1.number_input("Daily", 0.1, 5.0, row[0], 0.1)
    t_weekly = col2.number_input("Weekly", 0.1, 5.0, row[1], 0.1)
    t_sprint = col3.number_input("Sprint", 0.1, 5.0, row[2], 0.1)
    t_campaign = col4.number_input("Campaign", 0.1, 5.0, row[3], 0.1)

    st.write("**–°–ª–æ–∂–Ω–æ—Å—Ç—å:**")
    col1, col2, col3, col4, col5 = st.columns(5)
    d1 = col1.number_input("1", 0.1, 5.0, row[4], 0.1)
    d2 = col2.number_input("2", 0.1, 5.0, row[5], 0.1)
    d3 = col3.number_input("3", 0.1, 5.0, row[6], 0.1)
    d4 = col4.number_input("4", 0.1, 5.0, row[7], 0.1)
    d5 = col5.number_input("5", 0.1, 5.0, row[8], 0.1)

    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–Ω–æ–∂–∏—Ç–µ–ª–∏"):
        c.execute("""UPDATE fronts SET tier_daily=?, tier_weekly=?, tier_sprint=?, tier_campaign=?,
                     diff_1=?, diff_2=?, diff_3=?, diff_4=?, diff_5=? WHERE code=?""",
                 (t_daily, t_weekly, t_sprint, t_campaign, d1, d2, d3, d4, d5, front_code))
        conn.commit()
        st.success("–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")

    st.divider()

    # –ó–∞–¥–∞—á–∏ –ø–æ —Ç–∏—Ä–∞–º
    st.subheader("–ó–∞–¥–∞—á–∏")

    for tier in ['Daily', 'Weekly', 'Sprint', 'Campaign']:
        with st.expander(f"{tier} –∑–∞–¥–∞—á–∏"):
            c.execute("SELECT code, name, base_xp FROM piece_types WHERE front_code=? AND tier=? ORDER BY name",
                     (front_code, tier))
            tasks = c.fetchall()

            for tcode, tname, txp in tasks:
                col1, col2, col3, col4 = st.columns([2, 1, 1, 1])
                col1.write(f"**{tname}**")
                new_xp = col2.number_input("XP", 0, 10000, int(txp), 10, key=f"xp_{tcode}", label_visibility="collapsed")

                if col3.button("üíæ", key=f"save_{tcode}"):
                    c.execute("UPDATE piece_types SET base_xp=? WHERE code=?", (new_xp, tcode))
                    conn.commit()
                    st.success("‚úì")

                if col4.button("üóëÔ∏è", key=f"del_{tcode}"):
                    c.execute("DELETE FROM piece_types WHERE code=?", (tcode,))
                    conn.commit()
                    st.rerun()

            st.write("**–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É:**")
            col1, col2, col3 = st.columns(3)
            new_code = col1.text_input("–ö–æ–¥", "", key=f"newcode_{tier}")
            new_name = col2.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", "", key=f"newname_{tier}")
            new_xp = col3.number_input("XP", 0, 10000, 10, 10, key=f"newxp_{tier}")

            if st.button("–°–æ–∑–¥–∞—Ç—å", key=f"create_{tier}"):
                if new_code and new_name:
                    try:
                        c.execute("INSERT INTO piece_types (front_code, code, name, tier, base_xp) VALUES (?, ?, ?, ?, ?)",
                                 (front_code, new_code, new_name, tier, new_xp))
                        conn.commit()
                        st.success("–°–æ–∑–¥–∞–Ω–æ")
                        st.rerun()
                    except sqlite3.IntegrityError:
                        st.error("–ö–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

# ============= MAIN APP =============
st.set_page_config(page_title="Life Gamification", layout="wide", initial_sidebar_state="expanded")

conn = init_database()
seed_data(conn)

# Session state
if 'active_front' not in st.session_state:
    st.session_state['active_front'] = None
if 'active_page' not in st.session_state:
    st.session_state['active_page'] = 'dashboard'

# Sidebar
st.sidebar.title("Life Gamification")

# –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
if st.sidebar.button("üè† –î–∞—à–±–æ—Ä–¥", use_container_width=True):
    st.session_state['active_page'] = 'dashboard'
    st.session_state['active_front'] = None
    st.rerun()

if st.sidebar.button("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", use_container_width=True):
    st.session_state['active_page'] = 'settings'
    st.session_state['active_front'] = None
    st.rerun()

if st.sidebar.button("üõí –ú–∞–≥–∞–∑–∏–Ω", use_container_width=True):
    st.session_state['active_page'] = 'shop'
    st.session_state['active_front'] = None
    st.rerun()

st.sidebar.divider()
st.sidebar.subheader("–§—Ä–æ–Ω—Ç—ã")

c = conn.cursor()
c.execute("SELECT code, name FROM fronts ORDER BY name")
for fcode, fname in c.fetchall():
    if st.sidebar.button(fname, key=f"nav_{fcode}", use_container_width=True):
        st.session_state['active_front'] = fcode
        st.session_state['active_page'] = 'front'
        st.rerun()

# –†–æ—É—Ç–∏–Ω–≥
if st.session_state['active_front'] and st.session_state['active_page'] == 'front':
    front_detail_page(conn, st.session_state['active_front'])
elif st.session_state['active_page'] == 'dashboard':
    dashboard_page(conn)
elif st.session_state['active_page'] == 'settings':
    settings_page(conn)
elif st.session_state['active_page'] == 'shop':
    shop_page(conn)